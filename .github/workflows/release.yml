name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major.minor.patch)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      # Only run this step if triggered by workflow_dispatch
      - name: Update version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm version ${{ github.event.inputs.version }}
      
      # Only run this step if triggered by workflow_dispatch
      - name: Push changes (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git push
          git push --tags
      
      - name: Build package
        run: npm run build
      
      - name: Get version for build
        id: get_build_version
        run: |
          set -x  # Enable debugging
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
          
          # Configure Git (required for npm version)
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Show current package.json version
          echo "Current package.json version:"
          grep -m 1 '"version"' package.json
          
          # Update package.json version to match tag without creating a commit
          npm --no-git-tag-version version $VERSION
          
          # Verify the update
          echo "Updated package.json version:"
          grep -m 1 '"version"' package.json
          
      - name: Build WordPress plugin bundle
        run: node wp-bundle.js
        
      - name: Verify WordPress plugin bundle
        run: |
          VERSION=${{ steps.get_build_version.outputs.VERSION }}
          echo "Looking for agentman-chat-widget-$VERSION.zip"
          ls -la
          if [ -f "agentman-chat-widget-$VERSION.zip" ]; then
            echo "WordPress plugin bundle found!"
          else
            echo "WordPress plugin bundle NOT found!"
            exit 1
          fi
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
          # Debug info
          echo "Extracted version: $VERSION"
          echo "GitHub ref: $GITHUB_REF"
          ls -la
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      
      - name: List files before upload
        run: ls -la
        
      - name: Upload WordPress Plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./agentman-chat-widget-${{ steps.get_build_version.outputs.VERSION }}.zip
          asset_name: agentman-chat-widget-${{ steps.get_build_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
