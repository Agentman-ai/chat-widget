name: Shopify Widget Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      deploy_to_gcp:
        description: 'Deploy to Google Cloud Storage'
        required: true
        default: true
        type: boolean
      dry_run:
        description: 'Dry run (skip deployment)'
        required: false
        default: false
        type: boolean
      deploy_version:
        description: 'Deploy to version (v2 only - v1 is frozen)'
        required: true
        default: 'v2'
        type: choice
        options:
          - v2
  workflow_call:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: string
      deploy_to_gcp:
        description: 'Deploy to Google Cloud Storage'
        required: true
        default: true
        type: boolean
      dry_run:
        description: 'Dry run (skip deployment)'
        required: false
        default: false
        type: boolean
      deploy_version:
        description: 'Deploy to version (v2 only - v1 is frozen)'
        required: true
        default: 'v2'
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  prepare-shopify-release:
    name: Prepare Shopify Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      old_version: ${{ steps.version.outputs.old_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current Shopify version
        id: current
        run: |
          cd shopify
          if [ -f "version.json" ]; then
            CURRENT_VERSION=$(jq -r '.version' version.json)
          else
            CURRENT_VERSION="1.0.0"
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump Shopify version
        id: version
        run: |
          cd shopify
          OLD_VERSION="${{ steps.current.outputs.version }}"
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          
          case "${{ inputs.release_type }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Shopify version will be bumped from $OLD_VERSION to $NEW_VERSION"

      - name: Update Shopify version files
        if: inputs.dry_run == false
        run: |
          cd shopify
          VERSION="${{ steps.version.outputs.new_version }}"
          
          # Run bump-version.sh script
          if [ -f "bump-version.sh" ]; then
            chmod +x bump-version.sh
            ./bump-version.sh "${{ inputs.release_type }}"
          else
            # Manual version update
            echo '{"version": "'$VERSION'"}' > version.json
            
            # Update script-service/index.js
            if [ -f "script-service/index.js" ]; then
              sed -i "s/const SCRIPT_VERSION = '[^']*'/const SCRIPT_VERSION = '$VERSION'/" script-service/index.js
            fi
            
            # Update config-tool/script.js if exists
            if [ -f "config-tool/script.js" ]; then
              sed -i "s/version: '[^']*'/version: '$VERSION'/" config-tool/script.js
            fi
          fi
          
          echo "‚úÖ Shopify version updated to $VERSION"
          
          # Commit the version changes immediately
          cd ..
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add shopify/
          git commit -m "chore: bump Shopify widget version to $VERSION"
          git push origin main

  build-shopify-widget:
    name: Build Shopify Widget
    needs: prepare-shopify-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build core widget
        run: |
          echo "üîß Building core chat widget..."
          npm run build
          
          # Verify core build
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Core widget build failed!"
            exit 1
          fi
          echo "‚úÖ Core widget built successfully"

      - name: Build Shopify widget
        run: |
          cd shopify
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          
          # Ensure version.json has the correct version for the build
          echo "üìù Setting version to $VERSION for build..."
          echo '{"version": "'$VERSION'"}' > version.json
          
          # Update script-service/index.js as well
          if [ -f "script-service/index.js" ]; then
            sed -i "s/const SCRIPT_VERSION = '[^']*'/const SCRIPT_VERSION = '$VERSION'/" script-service/index.js
          fi
          
          # Run local build script
          if [ -f "deploy-local.sh" ]; then
            chmod +x deploy-local.sh
            ./deploy-local.sh build
          else
            echo "‚ùå deploy-local.sh not found!"
            exit 1
          fi
          
          # Verify build output
          if [ ! -f "dist/cdn/shopify/v1/widget.js" ]; then
            echo "‚ùå Shopify widget build failed!"
            exit 1
          fi
          
          # Create v2 directory structure (v1 is frozen and should not be modified)
          mkdir -p dist/cdn/shopify/v2
          cp dist/cdn/shopify/v1/widget.js dist/cdn/shopify/v2/widget.js
          cp dist/cdn/shopify/v1/widget.min.js dist/cdn/shopify/v2/widget.min.js
          
          # Add safety check to prevent v1 overwrite
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          if [ "$DEPLOY_VERSION" != "v2" ]; then
            echo "‚ùå Error: Only v2 deployments are allowed. v1 is frozen."
            exit 1
          fi
          
          echo "‚úÖ Shopify widget v$VERSION built successfully for v2"

      - name: Test widget locally
        run: |
          cd shopify/dist
          
          # Start simple HTTP server in background
          python3 -m http.server 8000 &
          SERVER_PID=$!
          sleep 2
          
          # Test widget availability
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          if curl -f -s http://localhost:8000/cdn/shopify/${DEPLOY_VERSION}/widget.js > /dev/null; then
            echo "‚úÖ Widget accessible via local server (${DEPLOY_VERSION})"
          else
            echo "‚ùå Widget not accessible"
            kill $SERVER_PID
            exit 1
          fi
          
          # Check version in widget
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          if curl -s http://localhost:8000/cdn/shopify/${DEPLOY_VERSION}/widget.js | grep -q "Version: $VERSION"; then
            echo "‚úÖ Version $VERSION found in widget (${DEPLOY_VERSION})"
          else
            echo "‚ö†Ô∏è Version mismatch in widget"
          fi
          
          kill $SERVER_PID

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shopify-widget-dist
          path: shopify/dist/
          retention-days: 1

  deploy-to-gcp:
    name: Deploy to Google Cloud Storage
    needs: [prepare-shopify-release, build-shopify-widget]
    runs-on: ubuntu-latest
    if: inputs.deploy_to_gcp && inputs.dry_run == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: shopify-widget-dist
          path: shopify/dist/

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: agentman-public-cloud-storage

      - name: Deploy to GCS
        run: |
          cd shopify
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          BUCKET="gs://chatwidget-shopify-storage-for-cdn"
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          
          # Safety check - only allow v2 deployments
          if [ "$DEPLOY_VERSION" != "v2" ]; then
            echo "‚ùå Error: Only v2 deployments are allowed. v1 is frozen to preserve the old version."
            exit 1
          fi
          
          echo "üöÄ Deploying Shopify widget v$VERSION to GCS (v2 only)..."
          
          # Deploy widget files - only v2 directory
          echo "üì¶ Uploading widget files to v2..."
          gsutil -m cp -r dist/cdn/shopify/v2/* $BUCKET/shopify/v2/
          gsutil -m cp -r dist/cdn/core/* $BUCKET/core/
          gsutil -m cp -r dist/cdn/shopify/config-tool/* $BUCKET/shopify/config-tool/
          
          # Update version.json
          echo "üìù Updating version.json..."
          echo '{"version": "'$VERSION'", "updated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > version.json
          gsutil cp version.json $BUCKET/shopify/version.json
          
          # Set cache headers
          echo "‚ö° Setting cache headers..."
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          gsutil -m setmeta -h "Cache-Control:public, max-age=300" "$BUCKET/shopify/${DEPLOY_VERSION}/widget.js"
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" "$BUCKET/core/chat-widget.js"
          
          echo "‚úÖ Deployment completed successfully!"
          
          echo "‚úÖ Deployed to Google Cloud Storage"

      - name: Invalidate CDN cache
        run: |
          echo "üîÑ Cache invalidation..."
          echo "Note: GCS serves files with cache headers. New content will be available after cache expiry (5 minutes for widget.js)"
          echo "Users can force refresh with Ctrl+Shift+R or Cmd+Shift+R"

      - name: Verify deployment
        run: |
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          CDN_URL="https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/${DEPLOY_VERSION}/widget.js"
          
          echo "üîç Verifying deployment to ${DEPLOY_VERSION}..."
          
          # Check widget availability
          if curl -f -s "$CDN_URL" > /dev/null; then
            echo "‚úÖ Widget accessible at CDN (${DEPLOY_VERSION})"
          else
            echo "‚ùå Widget not accessible at CDN"
            exit 1
          fi
          
          # Check version
          if curl -s "$CDN_URL" | grep -q "Version: $VERSION"; then
            echo "‚úÖ Version $VERSION deployed successfully to ${DEPLOY_VERSION}"
          else
            echo "‚ùå Version mismatch in deployed widget"
            exit 1
          fi
          
          # Check version.json
          VERSION_JSON_URL="https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/version.json"
          DEPLOYED_VERSION=$(curl -s "$VERSION_JSON_URL" | jq -r '.version')
          
          if [ "$DEPLOYED_VERSION" = "$VERSION" ]; then
            echo "‚úÖ version.json updated correctly"
          else
            echo "‚ö†Ô∏è version.json shows $DEPLOYED_VERSION instead of $VERSION"
          fi

  create-shopify-release:
    name: Create Shopify Release
    needs: [prepare-shopify-release, build-shopify-widget, deploy-to-gcp]
    runs-on: ubuntu-latest
    if: always() && needs.prepare-shopify-release.result == 'success' && needs.build-shopify-widget.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Git tag
        if: inputs.dry_run == false
        run: |
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          TAG_NAME="shopify-v$VERSION"
          
          # Create and push tag
          git tag -a "$TAG_NAME" -m "Shopify Widget Release v$VERSION"
          git push origin "$TAG_NAME"
          
          echo "‚úÖ Created tag: $TAG_NAME"

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
          OLD_VERSION="${{ needs.prepare-shopify-release.outputs.old_version }}"
          
          DEPLOY_VERSION="${{ inputs.deploy_version }}"
          cat > release_notes.md << EOF
          # Shopify Widget v$VERSION
          
          ## What's Changed
          - Updated from v$OLD_VERSION to v$VERSION
          - Release type: ${{ inputs.release_type }}
          - Deployed to: **$DEPLOY_VERSION**
          
          ## Installation
          
          Add this script to your Shopify theme:
          
          \`\`\`html
          <script async 
              src="https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/$DEPLOY_VERSION/widget.js"
              data-agent-token="YOUR_AGENT_TOKEN">
          </script>
          \`\`\`
          
          ## CDN URLs
          - Widget ($DEPLOY_VERSION): https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/$DEPLOY_VERSION/widget.js
          - Widget (v1): https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/v1/widget.js
          - Core: https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/core/chat-widget.js
          - Config Tool: https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/config-tool/index.html
          
          ## Deployment Status
          - Deployed to GCP: ${{ inputs.deploy_to_gcp && inputs.dry_run == false && '‚úÖ Yes' || '‚ùå No' }}
          - Dry Run: ${{ inputs.dry_run && '‚úÖ Yes' || '‚ùå No' }}
          - Version Path: **$DEPLOY_VERSION**
          EOF
          
          # Store release notes
          NOTES=$(cat release_notes.md)
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: inputs.dry_run == false
        uses: softprops/action-gh-release@v1
        with:
          tag_name: shopify-v${{ needs.prepare-shopify-release.outputs.new_version }}
          name: Shopify Widget v${{ needs.prepare-shopify-release.outputs.new_version }}
          body: ${{ steps.notes.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Release Summary
    needs: [prepare-shopify-release, build-shopify-widget, deploy-to-gcp, create-shopify-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# üõçÔ∏è Shopify Widget Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ needs.prepare-shopify-release.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ needs.prepare-shopify-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.dry_run }}" = "false" ]; then
            VERSION="${{ needs.prepare-shopify-release.outputs.new_version }}"
            echo "## Release Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Git Tag: shopify-v$VERSION" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.deploy_to_gcp }}" = "true" ]; then
              DEPLOY_VERSION="${{ inputs.deploy_version }}"
              echo "- ‚úÖ CDN Widget ($DEPLOY_VERSION): [View](https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/$DEPLOY_VERSION/widget.js)" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Version JSON: [View](https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/version.json)" >> $GITHUB_STEP_SUMMARY
              echo "- ‚úÖ Config Tool: [View](https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/config-tool/index.html)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Installation Script" >> $GITHUB_STEP_SUMMARY
            echo '```html' >> $GITHUB_STEP_SUMMARY
            echo "<script async src=\"https://storage.googleapis.com/chatwidget-shopify-storage-for-cdn/shopify/${{ inputs.deploy_version }}/widget.js\" data-agent-token=\"YOUR_TOKEN\"></script>" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "## Dry Run Complete" >> $GITHUB_STEP_SUMMARY
            echo "This was a dry run. No files were deployed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: shopify-widget-dist
          failOnError: false
        continue-on-error: true